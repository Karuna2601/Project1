#!/bin/bash

# Define variables
NESSUS_PATH="/opt/nessus"
OUTPUT_FILE="/path/to/output_file.txt"
LATEST_VERSION_URL="https://www.tenable.com/downloads/api/v1/public/pages/nessus/downloads"
MACHINE_OS=$(uname -s)  # Get the machine's OS (Linux, Darwin, etc.)
MACHINE_ARCH=$(uname -m)  # Get the machine's architecture (x86_64, arm, etc.)

# Function to detect machine OS and architecture
detect_machine_config() {
    case "$MACHINE_OS" in
        Linux)
            case "$MACHINE_ARCH" in
                x86_64) DOWNLOAD_URL="https://www.tenable.com/downloads/nessus?file=Nessus-<version>-amd64.deb" ;;
                aarch64) DOWNLOAD_URL="https://www.tenable.com/downloads/nessus?file=Nessus-<version>-aarch64.deb" ;;
                armv7l) DOWNLOAD_URL="https://www.tenable.com/downloads/nessus?file=Nessus-<version>-armhf.deb" ;;
                *) echo "Unsupported architecture: $MACHINE_ARCH"; exit 1 ;;
            esac
            ;;
        Darwin) DOWNLOAD_URL="https://www.tenable.com/downloads/nessus?file=Nessus-<version>-macOS.dmg" ;;
        *)
            echo "Unsupported OS: $MACHINE_OS"
            exit 1
            ;;
    esac
}

# Function to check Nessus version
get_installed_version() {
    if [ -f "$NESSUS_PATH/sbin/nessusd" ]; then
        echo "Nessus is installed."
        installed_version=$("$NESSUS_PATH/sbin/nessusd" -v | grep -oP '\d+\.\d+\.\d+')
        echo "Installed version: $installed_version"
    else
        echo "Nessus is not installed."
        installed_version="none"
    fi
}

# Function to fetch the latest version from the Tenable website
get_latest_version() {
    echo "Fetching the latest version from Tenable website..."
    latest_version=$(curl -s "$LATEST_VERSION_URL" | grep -oP '\d+\.\d+\.\d+' | head -n 1)
    if [ -z "$latest_version" ]; then
        echo "Error fetching the latest version."
        exit 1
    fi
    echo "Latest version: $latest_version"
}

# Function to download and update Nessus
update_nessus() {
    echo "Updating Nessus..."
    download_url=$(echo "$DOWNLOAD_URL" | sed "s/<version>/$latest_version/")
    cd /tmp
    curl -O "$download_url"
    if [[ $MACHINE_OS == "Linux" ]]; then
        sudo dpkg -i Nessus-$latest_version*.deb  # Linux installation
    elif [[ $MACHINE_OS == "Darwin" ]]; then
        sudo hdiutil attach Nessus-$latest_version*.dmg  # macOS installation
        sudo installer -pkg /Volumes/Nessus/Nessus.pkg -target /
        sudo hdiutil detach /Volumes/Nessus
    fi
    echo "$(date): Updated to version $latest_version" >> "$OUTPUT_FILE"
}

# Main script flow
detect_machine_config
get_installed_version
get_latest_version

# Compare versions and update if necessary
if [ "$installed_version" != "$latest_version" ]; then
    echo "Updating Nessus from version $installed_version to $latest_version."
    update_nessus
else
    echo "Nessus is already up to date."
fi
